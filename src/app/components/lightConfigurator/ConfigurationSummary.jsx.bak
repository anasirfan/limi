"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { FaSave, FaShoppingCart, FaUser, FaCheck, FaTimes, FaSignInAlt, FaUserPlus, FaEnvelope, FaLock, FaEye, FaEyeSlash } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { addToCart } from "../../../redux/slices/cartSlice";
import { saveConfiguration, loginUser, registerUser } from "../../../redux/slices/userSlice";
import { useRouter } from "next/navigation";
import { toast } from "react-toastify";

const ConfigurationSummary = ({ totalPrice, lightType, lightAmount, cableColor, cableLength, pendants, isDarkMode }) => {
  // Redux setup
  const dispatch = useDispatch();
  const router = useRouter();
  const isLoggedIn = useSelector(state => state.user.isLoggedIn);
  
  // State for save configuration modal
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [configName, setConfigName] = useState('');
  const [authView, setAuthView] = useState('signup'); // Default to signup view
  
  // Auth form state
  const [authForm, setAuthForm] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  return (
    <motion.div 
      className={`w-full mt-8 ${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.3 }}
    >
      <div className="flex flex-col md:flex-row md:justify-between md:items-start gap-6">
        {/* Price Information */}
        <div className="md:w-1/3">
          <h3 className="text-xl font-bold mb-3 font-['Amenti']">Your Selection</h3>
          <div>
            <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>Total Price</p>
            <p className="text-3xl font-bold">€{totalPrice}</p>
          </div>
          <div className={`mt-3 text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            <p>Estimated delivery: 2-3 weeks</p>
            <p>Free shipping on orders over €500</p>
          </div>
        </div>
        
        {/* Configuration Summary */}
        <div className="md:w-2/3">
          <div className={`p-4 rounded-lg text-sm ${isDarkMode ? 'bg-gray-700/50 text-gray-300' : 'bg-gray-100 text-gray-700'}`}>
            <h4 className="font-bold mb-2">Configuration Summary</h4>
            <div className="grid grid-cols-2 gap-x-4 gap-y-1">
              <div className="flex items-center gap-1">
                <span className="font-medium">Type:</span> 
                <span className="capitalize">{lightType}</span>
              </div>
              <div className="flex items-center gap-1">
                <span className="font-medium">Amount:</span> 
                <span>{lightAmount} pendant{lightAmount > 1 ? 's' : ''}</span>
              </div>
              <div className="flex items-center gap-1">
                <span className="font-medium">Cable:</span> 
                <span className="capitalize">{cableColor}, {cableLength}</span>
              </div>
              {lightAmount === 1 && (
                <div className="flex items-center gap-1">
                  <span className="font-medium">Design:</span> 
                  <div className="flex items-center gap-1">
                    <div 
                      className="w-3 h-3 rounded-full" 
                      style={{ 
                        backgroundImage: `url(/images/configOptions/${pendants[0]?.design === 'bumble' ? '1' : pendants[0]?.design === 'radial' ? '2' : pendants[0]?.design === 'fina' ? '3' : pendants[0]?.design === 'ico' ? '4' : '5'}.png)`,
                        backgroundSize: "cover"
                      }}
                    ></div>
                    <span className="capitalize">{pendants[0]?.design || 'bumble'}</span>
                  </div>
                </div>
              )}
            </div>
            
            {lightAmount > 1 && (
              <div className="mt-2">
                <p className="font-medium mb-1">Pendant Designs:</p>
                <div className="grid grid-cols-2 gap-x-2 gap-y-1">
                  {pendants.map((pendant, index) => (
                    <div key={index} className="flex items-center gap-1 text-xs">
                      <div 
                        className="w-3 h-3 rounded-full flex-shrink-0" 
                        style={{ 
                          backgroundImage: `url(/images/configOptions/${pendant.design === 'bumble' ? '1' : pendant.design === 'radial' ? '2' : pendant.design === 'fina' ? '3' : pendant.design === 'ico' ? '4' : '5'}.png)`,
                          backgroundSize: "cover"
                        }}
                      ></div>
                      <span>Pendant {index + 1}: {pendant.design}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Action Buttons */}
      <div className="flex justify-end mt-4 gap-3">
        <motion.button 
          onClick={handleSaveConfig}
          className={`flex items-center gap-2 ${isDarkMode ? 'bg-gray-700 hover:bg-gray-600 text-white' : 'bg-gray-200 hover:bg-gray-300 text-gray-800'} px-4 py-2 rounded-lg transition-colors`}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <FaSave /> Save Configuration
        </motion.button>
        <motion.button 
          onClick={handleAddToCart}
          className="flex items-center gap-2 bg-emerald-500 hover:bg-emerald-600 text-white px-6 py-2 rounded-lg transition-colors"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <FaShoppingCart /> Add to Cart
        </motion.button>
      </div>
      
      {/* Save Configuration Modal */}
      <AnimatePresence>
        {showSaveModal && (
          <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
            <motion.div 
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-[#2B2D2F] rounded-xl p-6 max-w-md w-full mx-4"
            >
              <h3 className="text-xl font-bold text-white mb-4">Save Your Configuration</h3>
              
              <div className="mb-4">
                <label className="block text-gray-300 mb-2">Configuration Name</label>
                <input 
                  type="text" 
                  value={configName}
                  onChange={(e) => setConfigName(e.target.value)}
                  placeholder="My Perfect Lighting Setup"
                  className="w-full bg-gray-700 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#50C878]"
                />
              </div>
              
              <div className="p-3 bg-gray-800 rounded-lg mb-4">
                <h4 className="text-sm font-medium text-gray-300 mb-2">Configuration Summary</h4>
                <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-sm text-gray-400">
                  <div>Type: <span className="text-white capitalize">{lightType}</span></div>
                  <div>Amount: <span className="text-white">{lightAmount}</span></div>
                  <div>Design: <span className="text-white capitalize">{pendants[0]?.design || 'bumble'}</span></div>
                  <div>Cable: <span className="text-white capitalize">{cableColor}, {cableLength}</span></div>
                </div>
              </div>
              
              <div className="flex justify-end gap-3">
                <motion.button
                  onClick={() => setShowSaveModal(false)}
                  className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Cancel
                </motion.button>
                <motion.button
                  onClick={saveConfigToRedux}
                  className="bg-[#50C878] hover:bg-[#3da861] text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <FaCheck /> Save
                </motion.button>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
      
      {/* Authentication Modal */}
      <AnimatePresence>
        {showAuthModal && (
          <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
            <motion.div 
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-[#2B2D2F] rounded-xl p-6 max-w-md w-full mx-4"
            >
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-xl font-bold text-white">{authView === 'signup' ? 'Create an Account' : 'Log In'}</h3>
                <button 
                  onClick={() => setShowAuthModal(false)}
                  className="text-gray-400 hover:text-white"
                >
                  <FaTimes />
                </button>
              </div>
              
              <div className="text-center py-4">
                <div className="mb-4 text-gray-300">
                  <FaUser className="text-4xl mx-auto mb-3 text-[#50C878]" />
                  <p>You need to be logged in to {authView === 'signup' ? 'create an account and ' : ''}save configurations.</p>
                </div>
                
                {/* Auth toggle buttons */}
                <div className="flex mb-6 border-b border-gray-700">
                  <button 
                    className={`flex-1 py-2 font-medium ${authView === 'signup' ? 'text-[#50C878] border-b-2 border-[#50C878]' : 'text-gray-400'}`}
                    onClick={() => setAuthView('signup')}
                  >
                    <FaUserPlus className="inline mr-2" /> Sign Up
                  </button>
                  <button 
                    className={`flex-1 py-2 font-medium ${authView === 'login' ? 'text-[#50C878] border-b-2 border-[#50C878]' : 'text-gray-400'}`}
                    onClick={() => setAuthView('login')}
                  >
                    <FaSignInAlt className="inline mr-2" /> Log In
                  </button>
                </div>
                
                <div className="flex gap-3 justify-center">
                  <motion.button
                    onClick={handleAuthRedirect}
                    className="bg-[#50C878] hover:bg-[#3da861] text-white px-4 py-2 rounded-lg transition-colors"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {authView === 'signup' ? 'Sign Up' : 'Log In'}
                  </motion.button>
                  <motion.button
                    onClick={() => setShowAuthModal(false)}
                    className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    Cancel
                  </motion.button>
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

  // Function to handle adding the current configuration to cart
  function handleAddToCart() {
    // Create a product object from the current configuration
    const product = {
      id: `light_${Date.now()}`,
      name: `${lightType.charAt(0).toUpperCase() + lightType.slice(1)} Light (${lightAmount > 1 ? `${lightAmount} pendants` : pendants[0]?.design || 'bumble'})`,
      price: parseFloat(totalPrice),
      thumbnail: `/images/products/${lightType}-${pendants[0]?.design || 'bumble'}.jpg`,
      slug: `${lightType}-light-${pendants[0]?.design || 'bumble'}`,
      category: 'Lighting',
      configuration: {
        lightType,
        lightAmount,
        pendants: pendants.map(p => ({ design: p.design, color: p.color })),
        cableColor,
        cableLength,
      }
    };
    
    // Dispatch action to add to cart
    dispatch(addToCart({ product, quantity: 1 }));
    
    // Show success notification
    toast.success('Added to cart successfully!', {
      position: "bottom-right",
      autoClose: 3000,
      theme: isDarkMode ? "dark" : "light"
    });
  }
  
  // Function to handle saving the current configuration
  function handleSaveConfig() {
    if (!isLoggedIn) {
      setShowAuthModal(true);
      return;
    }
    
    setShowSaveModal(true);
    setConfigName(`${lightType.charAt(0).toUpperCase() + lightType.slice(1)} Light Configuration`);
  }
  
  // Function to save configuration to Redux
  function saveConfigToRedux() {
    if (!configName.trim()) {
      toast.error('Please enter a name for your configuration', {
        position: "bottom-right",
        autoClose: 3000,
        theme: "dark"
      });
      return;
    }
    
    // Create configuration object
    const configData = {
      name: configName,
      lightType,
      lightAmount,
      pendants: pendants.map(p => ({ design: p.design, color: p.color })),
      cableColor,
      cableLength,
      price: parseFloat(totalPrice),
      thumbnail: `/images/products/${lightType}-${pendants[0]?.design || 'bumble'}.jpg`,
      date: new Date().toISOString(),
    };
    
    // Dispatch action to save configuration
    dispatch(saveConfiguration(configData));
    
    // Close modal and show success notification
    setShowSaveModal(false);
    
    toast.success('Configuration saved successfully!', {
      position: "bottom-right",
      autoClose: 3000,
      theme: "dark"
    });
  }
  
  // Handle auth form change
  function handleAuthFormChange(e) {
    const { name, value } = e.target;
    setAuthForm(prev => ({
      ...prev,
      [name]: value
    }));
  }
  
  // Handle auth form submission
  async function handleAuthSubmit(e) {
    e.preventDefault();
    setError('');
    setLoading(true);
    
    try {
      if (authView === 'signup') {
        // Validate form
        if (authForm.password !== authForm.confirmPassword) {
          throw new Error('Passwords do not match');
        }
        
        if (authForm.password.length < 6) {
          throw new Error('Password must be at least 6 characters');
        }
        
        // Register user
        await dispatch(registerUser({
          name: authForm.name,
          email: authForm.email,
          password: authForm.password
        }));
        
        toast.success('Account created successfully!', {
          position: "bottom-right",
          autoClose: 3000,
          theme: "dark"
        });
      } else {
        // Login user
        await dispatch(loginUser({
          email: authForm.email,
          password: authForm.password
        }));
        
        toast.success('Logged in successfully!', {
          position: "bottom-right",
          autoClose: 3000,
          theme: "dark"
        });
      }
      
      // Close auth modal and open save modal
      setShowAuthModal(false);
      setShowSaveModal(true);
      setConfigName(`${lightType.charAt(0).toUpperCase() + lightType.slice(1)} Light Configuration`);
    } catch (err) {
      console.error('Auth error:', err);
      setError(err.message || 'Authentication failed. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  return (
    <motion.div 
      className={`w-full mt-8 ${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.3 }}
    >
      <div className="flex flex-col md:flex-row md:justify-between md:items-start gap-6">
        {/* Price Information */}
        <div className="md:w-1/3">
          <h3 className="text-xl font-bold mb-3 font-['Amenti']">Your Selection</h3>
          <div>
            <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>Total Price</p>
            <p className="text-3xl font-bold">€{totalPrice}</p>
          </div>
          <div className={`mt-3 text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            <p>Estimated delivery: 2-3 weeks</p>
            <p>Free shipping on orders over €500</p>
          </div>
        </div>
        
        {/* Configuration Summary */}
        <div className="md:w-2/3">
          <div className={`p-4 rounded-lg text-sm ${isDarkMode ? 'bg-gray-700/50 text-gray-300' : 'bg-gray-100 text-gray-700'}`}>
            <h4 className="font-bold mb-2">Configuration Summary</h4>
            <div className="grid grid-cols-2 gap-x-4 gap-y-1">
              <div className="flex items-center gap-1">
                <span className="font-medium">Type:</span> 
                <span className="capitalize">{lightType}</span>
              </div>
              <div className="flex items-center gap-1">
                <span className="font-medium">Amount:</span> 
                <span>{lightAmount} pendant{lightAmount > 1 ? 's' : ''}</span>
              </div>
              <div className="flex items-center gap-1">
                <span className="font-medium">Cable:</span> 
                <span className="capitalize">{cableColor}, {cableLength}</span>
              </div>
              {lightAmount === 1 && (
                <div className="flex items-center gap-1">
                  <span className="font-medium">Design:</span> 
                  <div className="flex items-center gap-1">
                    <div 
                      className="w-3 h-3 rounded-full" 
                      style={{ 
                        backgroundImage: `url(/images/configOptions/${pendants[0]?.design === 'bumble' ? '1' : pendants[0]?.design === 'radial' ? '2' : pendants[0]?.design === 'fina' ? '3' : pendants[0]?.design === 'ico' ? '4' : '5'}.png)`,
                        backgroundSize: "cover"
                      }}
                    ></div>
                    <span className="capitalize">{pendants[0]?.design || 'bumble'}</span>
                  </div>
                </div>
              )}
            </div>
            
            {lightAmount > 1 && (
              <div className="mt-2">
                <p className="font-medium mb-1">Pendant Designs:</p>
                <div className="grid grid-cols-2 gap-x-2 gap-y-1">
                  {pendants.map((pendant, index) => (
                    <div key={index} className="flex items-center gap-1 text-xs">
                      <div 
                        className="w-3 h-3 rounded-full flex-shrink-0" 
                        style={{ 
                          backgroundImage: `url(/images/configOptions/${pendant.design === 'bumble' ? '1' : pendant.design === 'radial' ? '2' : pendant.design === 'fina' ? '3' : pendant.design === 'ico' ? '4' : '5'}.png)`,
                          backgroundSize: "cover"
                        }}
                      ></div>
                      <span>Pendant {index + 1}: {pendant.design}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Action Buttons */}
      <div className="flex justify-end mt-4 gap-3">
        <motion.button 
          onClick={handleSaveConfig}
          className={`flex items-center gap-2 ${isDarkMode ? 'bg-gray-700 hover:bg-gray-600 text-white' : 'bg-gray-200 hover:bg-gray-300 text-gray-800'} px-4 py-2 rounded-lg transition-colors`}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <FaSave /> Save Configuration
        </motion.button>
        <motion.button 
          onClick={handleAddToCart}
          className="flex items-center gap-2 bg-emerald-500 hover:bg-emerald-600 text-white px-6 py-2 rounded-lg transition-colors"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <FaShoppingCart /> Add to Cart
        </motion.button>
      </div>
      
      {/* Save Configuration Modal */}
      <AnimatePresence>
        {showSaveModal && (
          <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
            <motion.div 
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-[#2B2D2F] rounded-xl p-6 max-w-md w-full mx-4"
            >
              <h3 className="text-xl font-bold text-white mb-4">Save Your Configuration</h3>
              
              <div className="mb-4">
                <label className="block text-gray-300 mb-2">Configuration Name</label>
                <input 
                  type="text" 
                  value={configName}
                  onChange={(e) => setConfigName(e.target.value)}
                  placeholder="My Perfect Lighting Setup"
                  className="w-full bg-gray-700 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#50C878]"
                />
              </div>
              
              <div className="p-3 bg-gray-800 rounded-lg mb-4">
                <h4 className="text-sm font-medium text-gray-300 mb-2">Configuration Summary</h4>
                <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-sm text-gray-400">
                  <div>Type: <span className="text-white capitalize">{lightType}</span></div>
                  <div>Amount: <span className="text-white">{lightAmount}</span></div>
                  <div>Design: <span className="text-white capitalize">{pendants[0]?.design || 'bumble'}</span></div>
                  <div>Cable: <span className="text-white capitalize">{cableColor}, {cableLength}</span></div>
                </div>
              </div>
              
              <div className="flex justify-end gap-3">
                <motion.button
                  onClick={() => setShowSaveModal(false)}
                  className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Cancel
                </motion.button>
                <motion.button
                  onClick={saveConfigToRedux}
                  className="bg-[#50C878] hover:bg-[#3da861] text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <FaCheck /> Save
                </motion.button>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
      
      {/* Authentication Modal */}
      <AnimatePresence>
        {showAuthModal && (
          <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
            <motion.div 
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-[#2B2D2F] rounded-xl p-6 max-w-md w-full mx-4"
            >
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-xl font-bold text-white">{authView === 'signup' ? 'Create an Account' : 'Log In'}</h3>
                <button 
                  onClick={() => setShowAuthModal(false)}
                  className="text-gray-400 hover:text-white"
                >
                  <FaTimes />
                </button>
              </div>
              
              <div className="text-center py-4">
                <div className="mb-4 text-gray-300">
                  <FaUser className="text-4xl mx-auto mb-3 text-[#50C878]" />
                  <p>You need to be logged in to {authView === 'signup' ? 'create an account and ' : ''}save configurations.</p>
                </div>
                
                {/* Auth toggle buttons */}
                <div className="flex mb-6 border-b border-gray-700">
                  <button 
                    className={`flex-1 py-2 font-medium ${authView === 'signup' ? 'text-[#50C878] border-b-2 border-[#50C878]' : 'text-gray-400'}`}
                    onClick={() => setAuthView('signup')}
                  >
                    <FaUserPlus className="inline mr-2" /> Sign Up
                  </button>
                  <button 
                    className={`flex-1 py-2 font-medium ${authView === 'login' ? 'text-[#50C878] border-b-2 border-[#50C878]' : 'text-gray-400'}`}
                    onClick={() => setAuthView('login')}
                  >
                    <FaSignInAlt className="inline mr-2" /> Log In
                  </button>
                </div>
                
                <div className="flex gap-3 justify-center">
                  <motion.button
                    onClick={handleAuthRedirect}
                    className="bg-[#50C878] hover:bg-[#3da861] text-white px-4 py-2 rounded-lg transition-colors"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {authView === 'signup' ? 'Sign Up' : 'Log In'}
                  </motion.button>
                  <motion.button
                    onClick={() => setShowAuthModal(false)}
                    className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    Cancel
                  </motion.button>
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default ConfigurationSummary;
